name: Deployment Scripts

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      component:
        description: 'Component to deploy'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - backend
        - frontend
        - database
        - redis
      action:
        description: 'Deployment action'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - rollback
        - restart
        - scale

env:
  KUBERNETES_NAMESPACE: esg-platform

jobs:
  deploy:
    name: Manual Deployment
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Update kubeconfig
      run: |
        if [ "${{ github.event.inputs.environment }}" == "production" ]; then
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME_PROD }}
        else
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME_STAGING }}
        fi

    - name: Deploy All Components
      if: github.event.inputs.component == 'all' && github.event.inputs.action == 'deploy'
      run: |
        kubectl apply -f infrastructure/kubernetes/namespace.yaml
        kubectl apply -f infrastructure/kubernetes/configmaps-secrets.yaml
        kubectl apply -f infrastructure/kubernetes/database-deployment.yaml
        kubectl apply -f infrastructure/kubernetes/redis-deployment.yaml
        kubectl apply -f infrastructure/kubernetes/backend-deployment.yaml
        kubectl apply -f infrastructure/kubernetes/frontend-deployment.yaml
        kubectl apply -f infrastructure/kubernetes/services-ingress.yaml
        
        # Wait for all deployments
        kubectl rollout status deployment/esg-backend -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=600s
        kubectl rollout status deployment/esg-frontend -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=600s
        kubectl rollout status deployment/esg-database -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=600s
        kubectl rollout status deployment/esg-redis -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=600s

    - name: Deploy Backend Only
      if: github.event.inputs.component == 'backend' && github.event.inputs.action == 'deploy'
      run: |
        kubectl apply -f infrastructure/kubernetes/backend-deployment.yaml
        kubectl rollout status deployment/esg-backend -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=600s

    - name: Deploy Frontend Only
      if: github.event.inputs.component == 'frontend' && github.event.inputs.action == 'deploy'
      run: |
        kubectl apply -f infrastructure/kubernetes/frontend-deployment.yaml
        kubectl rollout status deployment/esg-frontend -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=600s

    - name: Deploy Database Only
      if: github.event.inputs.component == 'database' && github.event.inputs.action == 'deploy'
      run: |
        kubectl apply -f infrastructure/kubernetes/database-deployment.yaml
        kubectl rollout status deployment/esg-database -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=600s

    - name: Deploy Redis Only
      if: github.event.inputs.component == 'redis' && github.event.inputs.action == 'deploy'
      run: |
        kubectl apply -f infrastructure/kubernetes/redis-deployment.yaml
        kubectl rollout status deployment/esg-redis -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=600s

    - name: Rollback Deployment
      if: github.event.inputs.action == 'rollback'
      run: |
        if [ "${{ github.event.inputs.component }}" == "all" ]; then
          kubectl rollout undo deployment/esg-backend -n ${{ env.KUBERNETES_NAMESPACE }}
          kubectl rollout undo deployment/esg-frontend -n ${{ env.KUBERNETES_NAMESPACE }}
        elif [ "${{ github.event.inputs.component }}" == "backend" ]; then
          kubectl rollout undo deployment/esg-backend -n ${{ env.KUBERNETES_NAMESPACE }}
        elif [ "${{ github.event.inputs.component }}" == "frontend" ]; then
          kubectl rollout undo deployment/esg-frontend -n ${{ env.KUBERNETES_NAMESPACE }}
        fi

    - name: Restart Deployment
      if: github.event.inputs.action == 'restart'
      run: |
        if [ "${{ github.event.inputs.component }}" == "all" ]; then
          kubectl rollout restart deployment/esg-backend -n ${{ env.KUBERNETES_NAMESPACE }}
          kubectl rollout restart deployment/esg-frontend -n ${{ env.KUBERNETES_NAMESPACE }}
          kubectl rollout restart deployment/esg-database -n ${{ env.KUBERNETES_NAMESPACE }}
          kubectl rollout restart deployment/esg-redis -n ${{ env.KUBERNETES_NAMESPACE }}
        elif [ "${{ github.event.inputs.component }}" == "backend" ]; then
          kubectl rollout restart deployment/esg-backend -n ${{ env.KUBERNETES_NAMESPACE }}
        elif [ "${{ github.event.inputs.component }}" == "frontend" ]; then
          kubectl rollout restart deployment/esg-frontend -n ${{ env.KUBERNETES_NAMESPACE }}
        elif [ "${{ github.event.inputs.component }}" == "database" ]; then
          kubectl rollout restart deployment/esg-database -n ${{ env.KUBERNETES_NAMESPACE }}
        elif [ "${{ github.event.inputs.component }}" == "redis" ]; then
          kubectl rollout restart deployment/esg-redis -n ${{ env.KUBERNETES_NAMESPACE }}
        fi

    - name: Scale Deployment
      if: github.event.inputs.action == 'scale'
      run: |
        echo "Scaling deployment - this would require additional input parameters"
        kubectl get deployments -n ${{ env.KUBERNETES_NAMESPACE }}

    - name: Verify Deployment
      run: |
        echo "Deployment Status:"
        kubectl get pods -n ${{ env.KUBERNETES_NAMESPACE }}
        kubectl get services -n ${{ env.KUBERNETES_NAMESPACE }}
        kubectl get ingress -n ${{ env.KUBERNETES_NAMESPACE }}
        
        echo "\nPod Health:"
        kubectl describe pods -n ${{ env.KUBERNETES_NAMESPACE }} | grep -E "Name:|Ready:|Status:|Restart"