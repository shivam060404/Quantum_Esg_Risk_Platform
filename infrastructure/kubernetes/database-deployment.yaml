apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: esg-platform
  labels:
    app: esg-postgres
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: gp2
  resources:
    requests:
      storage: 100Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: esg-postgres
  namespace: esg-platform
  labels:
    app: esg-postgres
    component: database
    version: v1
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: esg-postgres
  template:
    metadata:
      labels:
        app: esg-postgres
        component: database
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: esg-postgres-sa
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgres
        image: timescale/timescaledb:latest-pg14
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: esg-config
              key: postgres-db
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: esg-secrets
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: esg-secrets
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
        resources:
          requests:
            cpu: 500m
            memory: 2Gi
          limits:
            cpu: 2
            memory: 8Gi
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - -e
            - |
              exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
              [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9187
          name: metrics
          protocol: TCP
        env:
        - name: DATA_SOURCE_NAME
          valueFrom:
            secretKeyRef:
              name: esg-secrets
              key: postgres-exporter-dsn
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-init
        configMap:
          name: postgres-init-config
      - name: postgres-config
        configMap:
          name: postgres-config
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
---
apiVersion: v1
kind: Service
metadata:
  name: esg-postgres-service
  namespace: esg-platform
  labels:
    app: esg-postgres
    component: database
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  - port: 9187
    targetPort: 9187
    protocol: TCP
    name: metrics
  selector:
    app: esg-postgres
  sessionAffinity: None
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: esg-postgres-sa
  namespace: esg-platform
  labels:
    app: esg-postgres
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/esg-postgres-role
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: esg-platform
  labels:
    app: esg-postgres
data:
  postgresql.conf: |
    # TimescaleDB Configuration
    shared_preload_libraries = 'timescaledb'
    
    # Memory Configuration
    shared_buffers = 2GB
    effective_cache_size = 6GB
    work_mem = 64MB
    maintenance_work_mem = 512MB
    
    # Checkpoint Configuration
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    
    # Connection Configuration
    max_connections = 200
    
    # Logging Configuration
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_statement = 'all'
    log_min_duration_statement = 1000
    
    # TimescaleDB specific
    timescaledb.max_background_workers = 8
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-config
  namespace: esg-platform
  labels:
    app: esg-postgres
data:
  init.sql: |
    -- Enable TimescaleDB extension
    CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;
    
    -- Create ESG time series tables
    CREATE TABLE IF NOT EXISTS esg_time_series (
        time TIMESTAMPTZ NOT NULL,
        company_id UUID NOT NULL,
        metric_type VARCHAR(50) NOT NULL,
        metric_value DOUBLE PRECISION,
        data_source VARCHAR(100),
        verification_status VARCHAR(20) DEFAULT 'pending',
        created_at TIMESTAMPTZ DEFAULT NOW()
    );
    
    -- Convert to hypertable
    SELECT create_hypertable('esg_time_series', 'time', if_not_exists => TRUE);
    
    -- Create indexes
    CREATE INDEX IF NOT EXISTS idx_esg_company_time ON esg_time_series (company_id, time DESC);
    CREATE INDEX IF NOT EXISTS idx_esg_metric_type ON esg_time_series (metric_type, time DESC);
    
    -- Create climate risk data table
    CREATE TABLE IF NOT EXISTS climate_risk_data (
        time TIMESTAMPTZ NOT NULL,
        portfolio_id UUID NOT NULL,
        scenario_type VARCHAR(50) NOT NULL,
        risk_metric VARCHAR(50) NOT NULL,
        risk_value DOUBLE PRECISION,
        confidence_interval DOUBLE PRECISION,
        model_version VARCHAR(20)
    );
    
    -- Convert to hypertable
    SELECT create_hypertable('climate_risk_data', 'time', if_not_exists => TRUE);
    
    -- Create blockchain verification history
    CREATE TABLE IF NOT EXISTS blockchain_verification_history (
        time TIMESTAMPTZ NOT NULL,
        entity_type VARCHAR(50) NOT NULL,
        entity_id UUID NOT NULL,
        transaction_hash VARCHAR(66),
        block_number BIGINT,
        verification_score DOUBLE PRECISION,
        gas_used INTEGER,
        verification_time DOUBLE PRECISION,
        consensus_score DOUBLE PRECISION,
        external_sources_verified INTEGER,
        success BOOLEAN DEFAULT TRUE
    );
    
    -- Convert to hypertable
    SELECT create_hypertable('blockchain_verification_history', 'time', if_not_exists => TRUE);