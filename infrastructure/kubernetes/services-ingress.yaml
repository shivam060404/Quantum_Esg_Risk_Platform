apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: esg-platform-ingress
  namespace: esg-platform
  labels:
    app: esg-platform
    component: ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains";
spec:
  tls:
  - hosts:
    - esg-platform.example.com
    - api.esg-platform.example.com
    - admin.esg-platform.example.com
    secretName: esg-platform-tls
  rules:
  # Main application
  - host: esg-platform.example.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: esg-backend-service
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: esg-frontend-service
            port:
              number: 80
  
  # API subdomain
  - host: api.esg-platform.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: esg-backend-service
            port:
              number: 80
  
  # Admin dashboard
  - host: admin.esg-platform.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: esg-admin-service
            port:
              number: 80
---
apiVersion: v1
kind: Service
metadata:
  name: esg-platform-lb
  namespace: esg-platform
  labels:
    app: esg-platform
    component: loadbalancer
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:region:account:certificate/cert-id
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  - port: 443
    targetPort: 443
    protocol: TCP
    name: https
  selector:
    app: nginx-ingress-controller
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: esg-admin-service
  namespace: esg-platform
  labels:
    app: esg-admin
    component: admin
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: esg-admin
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: esg-monitoring-service
  namespace: esg-platform
  labels:
    app: esg-monitoring
    component: monitoring
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: prometheus
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: grafana
  selector:
    app: esg-monitoring
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: esg-blockchain-service
  namespace: esg-platform
  labels:
    app: esg-blockchain
    component: blockchain
spec:
  type: ClusterIP
  ports:
  - port: 8545
    targetPort: 8545
    protocol: TCP
    name: rpc
  - port: 8546
    targetPort: 8546
    protocol: TCP
    name: ws
  selector:
    app: esg-blockchain
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: esg-ai-agents-service
  namespace: esg-platform
  labels:
    app: esg-ai-agents
    component: ai
spec:
  type: ClusterIP
  ports:
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: http
  selector:
    app: esg-ai-agents
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: esg-vector-db-service
  namespace: esg-platform
  labels:
    app: esg-vector-db
    component: vectordb
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: weaviate
  - port: 6333
    targetPort: 6333
    protocol: TCP
    name: qdrant
  selector:
    app: esg-vector-db
  sessionAffinity: None
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: esg-platform-network-policy
  namespace: esg-platform
  labels:
    app: esg-platform
    component: security
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from nginx ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  
  # Allow internal communication within namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: esg-platform
    ports:
    - protocol: TCP
    - protocol: UDP
  
  # Allow monitoring from prometheus
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # Allow HTTPS outbound (for external APIs)
  - to: []
    ports:
    - protocol: TCP
      port: 443
  
  # Allow HTTP outbound (for external APIs)
  - to: []
    ports:
    - protocol: TCP
      port: 80
  
  # Allow internal communication
  - to:
    - namespaceSelector:
        matchLabels:
          name: esg-platform
    ports:
    - protocol: TCP
    - protocol: UDP
---
apiVersion: v1
kind: Service
metadata:
  name: esg-websocket-service
  namespace: esg-platform
  labels:
    app: esg-websocket
    component: realtime
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: websocket
  selector:
    app: esg-websocket
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: esg-websocket-ingress
  namespace: esg-platform
  labels:
    app: esg-websocket
    component: realtime
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/websocket-services: "esg-websocket-service"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
spec:
  tls:
  - hosts:
    - ws.esg-platform.example.com
    secretName: esg-websocket-tls
  rules:
  - host: ws.esg-platform.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: esg-websocket-service
            port:
              number: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: esg-metrics-service
  namespace: esg-platform
  labels:
    app: esg-metrics
    component: metrics
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: metrics
  selector:
    app: esg-platform
  clusterIP: None
---
apiVersion: v1
kind: Endpoints
metadata:
  name: esg-metrics-service
  namespace: esg-platform
  labels:
    app: esg-metrics
    component: metrics
subsets:
- addresses:
  - ip: 10.0.0.1  # Replace with actual pod IPs
    targetRef:
      kind: Pod
      name: esg-backend-pod
  - ip: 10.0.0.2
    targetRef:
      kind: Pod
      name: esg-frontend-pod
  ports:
  - port: 8080
    name: metrics
    protocol: TCP