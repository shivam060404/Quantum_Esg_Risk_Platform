apiVersion: v1
kind: ConfigMap
metadata:
  name: esg-config
  namespace: esg-platform
  labels:
    app: esg-platform
    component: config
data:
  # API Configuration
  api-url: "https://api.esg-platform.example.com"
  api-version: "v1"
  
  # Database Configuration
  postgres-db: "esg_platform"
  postgres-host: "esg-postgres-service"
  postgres-port: "5432"
  
  # Redis Configuration
  redis-host: "esg-redis-service"
  redis-port: "6379"
  
  # Blockchain Configuration
  blockchain-rpc-url: "https://polygon-rpc.com"
  blockchain-network: "polygon"
  blockchain-chain-id: "137"
  
  # AI Configuration
  openai-model: "gpt-4"
  openai-temperature: "0.1"
  openai-max-tokens: "2000"
  
  # Vector Database Configuration
  pinecone-environment: "us-west1-gcp"
  pinecone-index-name: "esg-compliance"
  weaviate-host: "weaviate-service"
  weaviate-port: "8080"
  
  # Application Configuration
  log-level: "INFO"
  environment: "production"
  worker-processes: "4"
  max-concurrent-requests: "100"
  
  # Monitoring Configuration
  prometheus-enabled: "true"
  metrics-port: "8080"
  health-check-interval: "30"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: esg-frontend-config
  namespace: esg-platform
  labels:
    app: esg-frontend
    component: config
data:
  # Next.js Configuration
  NEXT_TELEMETRY_DISABLED: "1"
  NODE_OPTIONS: "--max-old-space-size=2048"
  
  # Feature Flags
  FEATURE_QUANTUM_OPTIMIZATION: "true"
  FEATURE_BLOCKCHAIN_VERIFICATION: "true"
  FEATURE_AI_COMPLIANCE: "true"
  FEATURE_REAL_TIME_MONITORING: "true"
  
  # UI Configuration
  THEME_MODE: "system"
  DEFAULT_LANGUAGE: "en"
  CHART_ANIMATION_DURATION: "1000"
  
  # Performance Configuration
  ENABLE_SERVICE_WORKER: "true"
  ENABLE_CODE_SPLITTING: "true"
  ENABLE_LAZY_LOADING: "true"
---
apiVersion: v1
kind: Secret
metadata:
  name: esg-secrets
  namespace: esg-platform
  labels:
    app: esg-platform
    component: secrets
type: Opaque
data:
  # Database Credentials (base64 encoded)
  postgres-user: cG9zdGdyZXM=  # postgres
  postgres-password: cGFzc3dvcmQ=  # password
  postgres-exporter-dsn: cG9zdGdyZXNxbDovL3Bvc3RncmVzOnBhc3N3b3JkQGVzZy1wb3N0Z3Jlcy1zZXJ2aWNlOjU0MzIvZXNnX3BsYXRmb3JtP3NzbG1vZGU9ZGlzYWJsZQ==
  
  # Redis Credentials
  redis-password: cmVkaXNwYXNzd29yZA==  # redispassword
  
  # API Keys
  openai-api-key: c2stWU9VUl9PUEVOQUlfQVBJX0tFWV9IRVJF  # sk-YOUR_OPENAI_API_KEY_HERE
  pinecone-api-key: WU9VUl9QSU5FQ09ORV9BUElfS0VZX0hFUkU=  # YOUR_PINECONE_API_KEY_HERE
  langchain-api-key: WU9VUl9MQU5HQ0hBSU5fQVBJX0tFWV9IRVJF  # YOUR_LANGCHAIN_API_KEY_HERE
  
  # Blockchain Credentials
  blockchain-private-key: WU9VUl9QUklWQVRFX0tFWV9IRVJF  # YOUR_PRIVATE_KEY_HERE
  infura-project-id: WU9VUl9JTkZVUkFfUFJPSkVDVF9JRF9IRVJF  # YOUR_INFURA_PROJECT_ID_HERE
  
  # JWT Secrets
  jwt-secret-key: WU9VUl9KV1RfU0VDUkVUX0tFWV9IRVJF  # YOUR_JWT_SECRET_KEY_HERE
  jwt-refresh-secret: WU9VUl9KV1RfUkVGUkVTSF9TRUNSRVRfSEVSRQ==  # YOUR_JWT_REFRESH_SECRET_HERE
  
  # External API Keys
  alpha-vantage-api-key: WU9VUl9BTFBIQV9WQU5UQUdFX0FQSV9LRVlfSEVSRQ==  # YOUR_ALPHA_VANTAGE_API_KEY_HERE
  quandl-api-key: WU9VUl9RVUFORExfQVBJX0tFWV9IRVJF  # YOUR_QUANDL_API_KEY_HERE
  
  # Monitoring Credentials
  prometheus-basic-auth: YWRtaW46cGFzc3dvcmQ=  # admin:password
  grafana-admin-password: YWRtaW5wYXNzd29yZA==  # adminpassword
---
apiVersion: v1
kind: Secret
metadata:
  name: esg-tls-secrets
  namespace: esg-platform
  labels:
    app: esg-platform
    component: tls
type: kubernetes.io/tls
data:
  # TLS Certificate and Key (base64 encoded)
  # These should be replaced with actual certificates
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t  # Base64 encoded certificate
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t  # Base64 encoded private key
---
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-secret
  namespace: esg-platform
  labels:
    app: esg-platform
    component: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5leGFtcGxlLmNvbSI6eyJ1c2VybmFtZSI6InVzZXIiLCJwYXNzd29yZCI6InBhc3N3b3JkIiwiYXV0aCI6ImRYTmxjanB3WVhOemQyOXlaQT09In19fQ==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: monitoring-config
  namespace: esg-platform
  labels:
    app: esg-platform
    component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "esg_rules.yml"
    
    scrape_configs:
      - job_name: 'esg-backend'
        static_configs:
          - targets: ['esg-backend-service:8000']
        metrics_path: '/metrics'
        scrape_interval: 30s
      
      - job_name: 'esg-frontend'
        static_configs:
          - targets: ['esg-frontend-service:3000']
        metrics_path: '/api/metrics'
        scrape_interval: 30s
      
      - job_name: 'postgres'
        static_configs:
          - targets: ['esg-postgres-service:9187']
        scrape_interval: 30s
      
      - job_name: 'redis'
        static_configs:
          - targets: ['esg-redis-service:9121']
        scrape_interval: 30s
      
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - esg-platform
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
  
  esg_rules.yml: |
    groups:
      - name: esg_platform_rules
        rules:
          - alert: HighErrorRate
            expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High error rate detected"
              description: "Error rate is {{ $value }} errors per second"
          
          - alert: DatabaseConnectionFailure
            expr: up{job="postgres"} == 0
            for: 2m
            labels:
              severity: critical
            annotations:
              summary: "Database connection failure"
              description: "PostgreSQL database is not responding"
          
          - alert: RedisConnectionFailure
            expr: up{job="redis"} == 0
            for: 2m
            labels:
              severity: warning
            annotations:
              summary: "Redis connection failure"
              description: "Redis cache is not responding"
          
          - alert: HighMemoryUsage
            expr: (container_memory_usage_bytes / container_spec_memory_limit_bytes) > 0.9
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High memory usage"
              description: "Container memory usage is above 90%"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: esg-platform
  labels:
    app: esg-platform
    component: nginx
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /var/log/nginx/access.log main;
        
        # Performance
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        
        # Gzip
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
        
        # Security Headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # Rate Limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
        
        # Upstream servers
        upstream backend {
            server esg-backend-service:8000;
        }
        
        upstream frontend {
            server esg-frontend-service:3000;
        }
        
        # Main server block
        server {
            listen 80;
            server_name esg-platform.example.com;
            
            # Redirect HTTP to HTTPS
            return 301 https://$server_name$request_uri;
        }
        
        server {
            listen 443 ssl http2;
            server_name esg-platform.example.com;
            
            # SSL Configuration
            ssl_certificate /etc/ssl/certs/tls.crt;
            ssl_certificate_key /etc/ssl/private/tls.key;
            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
            ssl_prefer_server_ciphers off;
            
            # API routes
            location /api/ {
                limit_req zone=api burst=20 nodelay;
                proxy_pass http://backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 60s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
            }
            
            # Frontend routes
            location / {
                proxy_pass http://frontend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 60s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
            }
            
            # Health check
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
    }